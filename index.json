[{"categories":["Container"],"content":"Having been struggling with Kubernetes clusters in the project I’m currently working on, I felt the need to understand Kubernetes architecture. While googling I found a great resource presented by Saad Ali, which gives a deeper insights on the design principle of Kubernets. This article can be said as a brief summary of the video. The talk is from 2018. Year 2018 sounds like an ancient times for the Kubernetes history, but he delivers the essence of Kubernetes philosophy. The video can be found here. ","date":"2020-12-24","objectID":"/kubernetes-architecture-what-and-why/:0:0","tags":["Kubernetes"],"title":"Kubernetes Architecture - What and Why","uri":"/kubernetes-architecture-what-and-why/"},{"categories":["Container"],"content":"1 Kubernetes Architecture - Main Components Kubernetes Cluster is divided into two parts: Control Plane Worker Node ","date":"2020-12-24","objectID":"/kubernetes-architecture-what-and-why/:1:0","tags":["Kubernetes"],"title":"Kubernetes Architecture - What and Why","uri":"/kubernetes-architecture-what-and-why/"},{"categories":["Container"],"content":"Control PlaneAs the name itself suggests, the Control Plane manages the whole cluster and Kubernetes objects. It responds to any changes end-users(or other components) requested, sets the desired state of the cluster, and tries to match the current state to the desired state. The Control Plane consists of: API Server: Provides an API endpoint for users/components. Every workflow is executed via this API server. No Kubernetes component communicates each other directly. etcd: Any objects created through the API server and the state of a cluster are stored here in a persistent manner. Only API Server can communicate to etcd. Scheduler: Queries the API server to watch for any unassigned objects, assigns them to one of available worker nodes. Controller Manager: Synchronizes the actual state of a cluster to the desired state. ","date":"2020-12-24","objectID":"/kubernetes-architecture-what-and-why/:1:1","tags":["Kubernetes"],"title":"Kubernetes Architecture - What and Why","uri":"/kubernetes-architecture-what-and-why/"},{"categories":["Container"],"content":"Worker NodeWorker Node is where the actual Pods are running. Inside a pod, container(s) is/are launched by the configured container runtime(mostly Docker, for now). The Worker Node has following components: kubelet: Manages everything running on that node. Monitors API server looking for assigned pods to that node, and reports any events on that node to API server. kube-proxy: Ensures network is properly configured for a cluster. Configures iptables on a node. In addition to those components I mentioned above, there are other components like kube-dns, but let’s hold them over till next time. ","date":"2020-12-24","objectID":"/kubernetes-architecture-what-and-why/:1:2","tags":["Kubernetes"],"title":"Kubernetes Architecture - What and Why","uri":"/kubernetes-architecture-what-and-why/"},{"categories":["Container"],"content":"2 Design Principles of KubernetesThis section focuses on why Kubernetes is designed this way. Like I said in the beginning, this section is extracted from the talk by Saad Ali. Thank him for sharing his great insight on Kubernetes. 👏👏 Kubernetes cluster is designed to be robust, to be fault-tolerent, and to minimize users' burden to manage clusters. 4 Design principles below accomplished the purposes, and led to the current success of Kubernetes. ","date":"2020-12-24","objectID":"/kubernetes-architecture-what-and-why/:2:0","tags":["Kubernetes"],"title":"Kubernetes Architecture - What and Why","uri":"/kubernetes-architecture-what-and-why/"},{"categories":["Container"],"content":"1) Kubernetes APIs are declarative, rather than imperativeUsers just declare what the desired state of a cluster would be, then the system internally manages to drive the given desired state. What would happen if we used imperative APIs? You should ssh into each node and command to that node like “Run this pod. If the pod fails, restart it… blah blah” It would be darn complicated to give every condition and handle all failure cases. However, Using declarative APIs makes our life a lot easier. Users only need to state “I want my cluster to be …,” then the magic happens! When Pods are dead, or even some nodes crashed, the Control Plane will drive the actual state to the desired state using available resources. ","date":"2020-12-24","objectID":"/kubernetes-architecture-what-and-why/:2:1","tags":["Kubernetes"],"title":"Kubernetes Architecture - What and Why","uri":"/kubernetes-architecture-what-and-why/"},{"categories":["Container"],"content":"2) There are no hidden internal APIsKubernetes internal components use exactly the same APIs which end-users use to communicate each other. This makes Kubernetes easily configurable(Everyone knows it’s not easy though😭). You can even build a custom scheculer. Moreover, Communication between Control Plane and Worker Node(s) can take the same advantage of using declarative APIs. Let’s say our Control Plane uses imperative APIs when talking to Worker Nodes. We achieved user-API’s simplicity, but Control Plane implementation would be a mess. Instead, Kubernetes adopted the same aproach. Each Worker Node keeps watching Contorl Plane’s API server if there exists any updates. Control Plane only needs to set the desired state of each Worker Node. Each Worker Node takes care of what should happen on the node. Mr. Ali describes that this mechanism is like “level-triggered” instead of “edge-triggered.” level-triggered vs edge-triggered Those terms level-triggered and edge-triggered are originally used in electronics, but the analogy makes sense. Edge-triggered means event-based, which means the Control Plane should signal to nodes whenever they needs get requests. If a node crashes for a while and gets back later, Contorl Plane must have a mechanism to resignal all the missing events to the restored node. Level-triggered architecture, in contrast, sets the state. In this system, a node which suffered from malfunctioning and managed to return ready knows what it’s supposed to do because all it needs to do is just query the state and do the job declared in that state. This removes a single point of failure. Even when the Control Plane is down, all Worker Nodes can do what they’re supposed to do based on the last state they queried. ","date":"2020-12-24","objectID":"/kubernetes-architecture-what-and-why/:2:2","tags":["Kubernetes"],"title":"Kubernetes Architecture - What and Why","uri":"/kubernetes-architecture-what-and-why/"},{"categories":["Container"],"content":"3) Meet the user where they areOne of primary goals of Kubernetes was the ability to migrate existing applications without additional modification. This is closely related to passing data or configuration to the running application. Kubernetes supports the following: Secret- can be used when storing sensitive data like password ConfigMap - can be used when storing configuration information DownwardAPI - can be used when retrieving pod’s metadata Data objects are stored in the Control Plane, but Pods should access the data inside those objects. Letting pods know the API server endpoint is additional modification which hinders transition to Kubernetes. Instead of communicating directly with API server in the Control Plane, Kubernetes allows data objects to be mounted as a file or environment variables in a container. In this manner, users need not amend the application itself, they just create some data objects and indicate that Pod A needs ConfigMap A. ","date":"2020-12-24","objectID":"/kubernetes-architecture-what-and-why/:2:3","tags":["Kubernetes"],"title":"Kubernetes Architecture - What and Why","uri":"/kubernetes-architecture-what-and-why/"},{"categories":["Container"],"content":"4) Workload Portability Decouple distributed system application development from cluster implementation. One of biggest advantages of Kubernetes is that users can deploy applications exactly the same way regardless of which Kubernetes cluster they’re working on. Kubernetes is designed to provide true abstraction layer to users so that they need not consider which machine the cluster is configured, OS, or devices. For example, Kubernetes supports referencing Cloud storages(GCE PD, AWS EBS, etc) directly when creating a Pod. But it should never be done like that way, because it prevents moving that Pod to another Cloud Service Provider. Instead, Kubernetes provides what it’s called PVC(PersistentVolumeClaim) / PV(PersistentVolume). This decouples storage consumption from storage implementation. User-facing abstraction layer can be portable. This led to Kubernetes' current success and popularity. 👉 Thank you for reading my post ! 🙏 👉 Please leave a comment if you have any ideas to share ! 🎶 ","date":"2020-12-24","objectID":"/kubernetes-architecture-what-and-why/:2:4","tags":["Kubernetes"],"title":"Kubernetes Architecture - What and Why","uri":"/kubernetes-architecture-what-and-why/"},{"categories":["Lang"],"content":"1. What is Short Variable Declaration?In most programming language, variable is initialized using assignment operator =. Go is not immune from this typical convention. It, however, supports a short-hand version of declaring and initializing variables at the same time. With the help of what is called “Short Variable Declaration Operator(:=)”, the code looks much nicer, but this operator adds up complexity which leads us to make some mistakes. Let’s get into more details of short variable declaration operator(:=). ","date":"2020-07-19","objectID":"/go-short-variable-declaratioin/:1:0","tags":["Go"],"title":"[Go] Short Variable Declaration","uri":"/go-short-variable-declaratioin/"},{"categories":["Lang"],"content":"2. Basic Syntax regular variable declaration syntax using var keyword var \u003cvariable_name\u003e \u003cvariable_type\u003e // Or you can initialize at the same time var \u003cvariable_name\u003e \u003cvariable_type\u003e = \u003cvalue\u003e variable declaration using Short variable declaration operator \u003cvariable_name\u003e := \u003cinitial_value\u003e You can declare a variable or many without specifying its type. ","date":"2020-07-19","objectID":"/go-short-variable-declaratioin/:2:0","tags":["Go"],"title":"[Go] Short Variable Declaration","uri":"/go-short-variable-declaratioin/"},{"categories":["Lang"],"content":"3. Rules to Follow","date":"2020-07-19","objectID":"/go-short-variable-declaratioin/:3:0","tags":["Go"],"title":"[Go] Short Variable Declaration","uri":"/go-short-variable-declaratioin/"},{"categories":["Lang"],"content":"1) Only used for Local VariablesYou cannot use short variable declaration to declare global variable, which means you can only use it inside a function. Global variables at package level can only be declared using var keyword. package main globalVar := 25 // Wrong!! syntax error: non-declaration statement outside function body func main() { localVar := 3 // OK } ","date":"2020-07-19","objectID":"/go-short-variable-declaratioin/:3:1","tags":["Go"],"title":"[Go] Short Variable Declaration","uri":"/go-short-variable-declaratioin/"},{"categories":["Lang"],"content":"2) Can be used for multiple variable declarationsGo supports multiple variable declarations in one line, which also works for short variable declaration. package main func main() { var1, var2 := 5, \"hello\" } ","date":"2020-07-19","objectID":"/go-short-variable-declaratioin/:3:2","tags":["Go"],"title":"[Go] Short Variable Declaration","uri":"/go-short-variable-declaratioin/"},{"categories":["Lang"],"content":"3) Cannot use twice for the same variableUsing := operator means declaring a new variable like using var keyword. Like you cannot use var to the variable you declared before, := cannot be used twice. If you want to assign a new value to it, just use =. package main func main() { var1 := 5 var1 = 7 // OK var1 := 10 // Wrong!! no new variables on left side of := } Warnings 1. Using short variable declaration operator without type doesn’t mean that the variable is type-free. Go compiler infers the variable’s type when initializing. Therefore, if you want to assign a new value which has a different type to the variable, you’ll encounter an error. package main func main() { var1 := true var1 = \"hello\" // Wrong!! cannot use \"String\" (type untyped string) as type bool in assignment } 2. You can use it twice in multiple variable declarations if you introduce new variables. The error message above written in the inline comment(no new variables on left side of :=) makes us raise a question. What if there are new variables on the left? Well, you can re-declare the variable with new variables in multi-variable assignment. This property is used frequently when dealing with errors. func exampleFunc() { var1, err := someFunc1() var2, err := someFunc2() // You don't need to write as err1, err2, ... } But still, you cannot re-declare a variable with different type. ","date":"2020-07-19","objectID":"/go-short-variable-declaratioin/:3:3","tags":["Go"],"title":"[Go] Short Variable Declaration","uri":"/go-short-variable-declaratioin/"},{"categories":["Lang"],"content":"4) Can be used in statements like if, for …You can use short variable declaration to use a certain variable only in the scope of if statements for example. if i := 10; i \u003e 0 { fmt.Println(\"i is greater than 0\") } 👉 Thank you for reading my post ! 🙏 👉 Please leave a comment if you have any ideas to share ! 🎶 ","date":"2020-07-19","objectID":"/go-short-variable-declaratioin/:3:4","tags":["Go"],"title":"[Go] Short Variable Declaration","uri":"/go-short-variable-declaratioin/"},{"categories":["Lang"],"content":"1 Concept of a Reference in C++A Reference is a new name(alias) for another existing object or variable. And, as the name suggests, it is a pointer internally. Reference is declared as: \u003ctype\u003e\u0026 \u003cname\u003e = \u003creferenced_variable\u003e Like pointer symbol(*), reference symbol(\u0026) can be placed anywhere between \u003ctype\u003e and \u003cname\u003e. Note Note that references must be initialized when they are created. References without objects to reference do not make sense. NULL reference does not exist. Cannot reference to constants. Like pointers cannot.(We need const keyword for this, sometimes called const references) int a = 10; int\u0026 ref1 = a; // O int\u0026 ref2 = NULL // X const int b = 5; int\u0026 ref3 = b; // X int\u0026 ref4 = 3; // X ","date":"2020-05-06","objectID":"/references-in-cplusplus/:1:0","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"2 Uses of References","date":"2020-05-06","objectID":"/references-in-cplusplus/:2:0","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"Simple AliasReferences are pointers(of course they don’t look like pointers) referring to the exact same object initialized with. References act like the referenced variables but only with different names. #include \u003ciostream\u003e int main() { int data = 10; int\u0026 rData = data; rData = 20; // same as data = 20; std::cout \u003c\u003c \"data: \" \u003c\u003c data \u003c\u003c std::endl; std::cout \u003c\u003c \"rData: \" \u003c\u003c rData \u003c\u003c std::endl; return 0; } The result is: Execution Result data: 20 rData: 20 ","date":"2020-05-06","objectID":"/references-in-cplusplus/:2:1","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"Function ParametersIt is very common that references are used as function parameters. When an argument is not passed as a reference, the copy of the argument is made, and the function deals with the copied value. However, in this case, passing argument as a reference makes us modify the original value directly. Also, if the size of the argument is big(like an array), it is efficient to use a reference as no copy of the big data happens. #include \u003ciostream\u003e void increase(int\u0026 value) { value++; } int main() { int data = 10; increase(data); // increase(\u0026data) Wrong! std::cout \u003c\u003c \"data: \" \u003c\u003c data \u003c\u003c std::endl; return 0; } The result is: Execution Result data: 11 Warning Passing constant argument to increase() function like increase(10) will generate a compile error. The reason is that reference can’t refer to contant value. To avoid this, we use const reference, which will be described below of this article. ","date":"2020-05-06","objectID":"/references-in-cplusplus/:2:2","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"3 References vs PointersReferences can be thought of as pointers with more restrictive power. For example, the first example can be substitued using pointer like: #inlcude \u003ciostream\u003e int main() { int data = 10; int* pData = \u0026data; *pData = 20; } Then, why do we need references? Actually, references are recommended in most cases because those restrictions prevent people from certain dangers of using pointers. With Great Power Comes Great Responsibility GIF from Spiderman GIFs Below are some of significant differences between References and Pointers. ","date":"2020-05-06","objectID":"/references-in-cplusplus/:3:0","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"Allowing NULL valuesLike said above, a reference can’t have NULL value. ","date":"2020-05-06","objectID":"/references-in-cplusplus/:3:1","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"Memory allocationPointer itself is allocated a memory address, and stores the memory address of the variable it points. However, reference shares the same memory address with the original variable(Of course it should also have memory address in low level). #include \u003ciostream\u003e int main() { int data = 10; int* pData = \u0026data; int\u0026 rData = data; std::cout \u003c\u003c \"addr of data: \" \u003c\u003c \u0026data \u003c\u003c std::endl; std::cout \u003c\u003c \"addr of pData: \" \u003c\u003c \u0026pData \u003c\u003c std::endl; std::cout \u003c\u003c \"addr of rData: \" \u003c\u003c \u0026rData \u003c\u003c std::endl; return 0; } The result is: Execution Result addr of data: 010FFE80 addr of pData: 010FFE74 addr of rData: 010FFE80 ","date":"2020-05-06","objectID":"/references-in-cplusplus/:3:2","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"Reassigning referenceOnce a reference is initialized, this reference can’t change. #include \u003ciostream\u003e int main() { int num1 = 10; int num2 = 20; int\u0026 rNum1 = num1; rNum1 = num2 } This code changes the value of num1 from 10 to the value of num2(20). Once rNum1 variable refers to num1, it doesn’t change. However, for the case of pointers, it is possible to change where it points. #include \u003ciostream\u003e int main() { int num1 = 10; int num2 = 20; int* pNum1 = \u0026num1; pNum1 = \u0026num2; } Pointer variable pNum1 now points num2. Now we can see something is wrong. In some cases this can be critical. To prevent this, use reference or const keyword. After all, int\u0026 rNum1 can be regarded as int* const pNum1. ","date":"2020-05-06","objectID":"/references-in-cplusplus/:3:3","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"4 Const ReferencesIt seems like reference covers all the pointer’s problem, but reference can also bring some problems. One big problem is that When a function’s parameter is reference and we are trying to use that function, we can’t be sure whether it is reference or not. int data = 10; someFunc(data); In C language, we can be sure that the value of data is still 10 after someFunc(data) has been executed. In C++, however, if the function is declared like void someFunc(int\u0026), there exists a possibility of modifying the value of data. This is where const reference should come in. we can prevent modifying the value of original argument by declaring the function as void someFunc(const int\u0026). Const reference also makes referencing to constant values possible. const int data = 10; const int\u0026 rData = data; // O const int\u0026 rNum = 20; // O This resolves another problem stated above. I mentioned increase(10) is not allowed in the function parameter example. If the function parameter is reference, argument should be made as a non-constant variable. This is very annoying. However, if we use const reference, we are then be able to pass contant argument to the function. Therefore, increase(10)is possible (Actually this function modifies the value of the argument, so it is not the right case to use it). ","date":"2020-05-06","objectID":"/references-in-cplusplus/:4:0","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"5 R-value References (C++11)R-value reference is introduced in C++11. Reference we discussed so far is actually a L-value reference. R-value reference uses two \u0026 symbols: \u003ctype\u003e\u0026\u0026 \u003cname\u003e = \u003cr-value\u003e ","date":"2020-05-06","objectID":"/references-in-cplusplus/:5:0","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"L-value and R-valueSimply we distinguish l-values and r-values by figuring out whether the value can be put left-side or right-side of assignment operator(=). However, I need slightly more concrete criteria. L-value is an object whose memory location is identifiable. Most variables are l-values. R-value is any object that is not l-value, which means we cannot identify its memory location. Literals and temporary values obtained from arithmetic operations or returned by function calls are usually r-values. Misconceptions Functions or operators always yields R-values int a = 5 + 3; // (5 + 3) is r-value int b; int\u0026 test() { return b; } test() = 1; // return value of test() is l-value int arr[10]; arr[2] = 100; // [] operator yields l-value R-values are not modifiable TestClass().testFunc(); // TestClass() returns r-value, but testFunc() may modify TestClass object ","date":"2020-05-06","objectID":"/references-in-cplusplus/:5:1","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"Referencing temporary valuesA result of arithmetic operations is temporary value. its scope is the line the operation was performed. After the execution of that line, we lose the temporary value. R-value reference makes us keep track of the temporary value. #include \u003ciostream\u003e int twice(int input) { return input * 2; } int main() { int\u0026\u0026 num1 = 3 + 7; int\u0026\u0026 num2 = twice(10); } This looks a bit wierd because we can just use simple int num1 = 3 + 7 instead of that ugly \u0026\u0026. I know this is not the real usefulness of r-value reference. I need to study further to figure out that. To be continued… 👉 Thank you for reading my post ! 🙏 👉 Please leave a comment if you have any ideas to share ! 🎶 ","date":"2020-05-06","objectID":"/references-in-cplusplus/:5:2","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Env"],"content":"1 What is Hugo?Hugo is a Static Site Generator. Then, what is a static site generator? To understand this word, we first need to understand what static, or dynamic on the contrary, is when it comes to websites. ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:1:0","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"Static Sites vs Dynamic SitesStatic sites just serve plain HTML files, which means exactly the same page is shown to every single one who accesses. Otherwise, Dynamic sites work the opposite way. People can see different pages when those pages are called ‘dynamic.’ Typical example is that the username you see must be different with your friends' usernames after login. Dynamic sites communicate with databases. We are so accustomed to dynamic sites that someone might say “How could a website or web service work without databases? 🙄” However, it is not always the case that a website needs a database. Blog can actually fall into that case. The main purpose of blog is to show written articles(static contents) to everyone who clicks those articles. In this case, static sites can take advantage over dynamic sites in that static sties are much simpler, and faster. ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:1:1","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"2 Why Hugo?There are many static site generators available. ‘Hexo’ is one of popular static site generators. ‘Jekyll’ seems to be very popular as it works naturally with ‘Github Pages’. However, there are several reasons why I chose to use Hugo as a static site generator: Hugo’s build time is the fastest among those three. Hugo has a pretty detailed documentation as I think. Above all, I found a theme that caught my mind. LoveIt ❤️ ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:2:0","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"3 Install HugoI use WSL(Windows Subsystem for Linux) Ubuntu 18.04 as my environment. Go to Hugo Github Releases page Select a suitable version and download hugo_extended_0.xx.x_Linux-64bit.deb. For me, I downloaded v0.67.1 using wget. You can get the download link by right-clicking the package and clicking ‘copy link address’: $ wget https://github.com/gohugoio/hugo/releases/download/v0.67.1/hugo_extended_0.67.1_Linux-64bit.deb Extract the package by using following command(Replace version with what you downloaded). $ sudo dpkg -i hugo_0.xx.x_Linux-64bit.deb Verify the installation is successful. $ hugo version ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:3:0","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"4 Create a Project","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:4:0","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"Create a New DirectoryHugo project directory can be made using the command below. The directory has default structure. $ hugo new site \u003cproject-name\u003e # For me, I created with a name 'blog' $ cd blog $ ls -al total 0 drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 . drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 .. drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 archetypes -rw-rw-rw- 1 jureaky jureaky 82 Apr 29 21:39 config.toml drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 content drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 data drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 layouts drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 static drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 themes ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:4:1","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"Create a Git RepositoryTwo Git repositories are needed. One is for this project directory blog. The other is for storing generated static files so that the blog can be exposed by Github Pages. The pages will be stored in public directory and this directory will be added as a submodule for this entire project. Go to Github and make two empty repositories(do not include README or any other). \u003cproject name repository\u003e - For me, blog \u003cusername\u003e.github.io repository - For me, jureaky.github.io Make the project directory as a git repository, and add github repository as origin $ git init $ git remote add origin https://github.com/jureaky/blog.git Add another github repository as a submodule in public directory. $ git submodule add -b master https://github.com/jureaky/jureaky.github.io.git public Tip For WSL users, to prevent unexpected issues caused by different line ending between Linux and Windows, add below configuration to .gitattributes file in each git project root. * text=auto eol=lf *.{cmd,[cC][mM][dD]} text eol=crlf *.{bat,[bB][aA][tT]} text eol=crlf For more information, please see here. ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:4:2","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"Install ThemeI found this theme, LoveIt. It looks neat and simple, but provides lots of plugins and features. The command below downloads the theme in themes/LovIt directory and add it as a submodule, which is a recommended way of installing theme because you can manage theme seperately so it is convenient if there is any update on your theme. $ git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:4:3","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"Blog ConfigurationBlog configuration is done through config.toml file in your root directory. Modify this file and add apropriate configurations. There might be a document for this in your theme page. For LoveIt theme, menu configuration can be found here, and site configuration here. Further, I overrided some css variables to change fonts by creating config/css/_override.scss file: @import url('https://fonts.googleapis.com/css2?family=Open+Sans\u0026family=Zilla+Slab\u0026display=swap'); $global-font-family: Open Sans, sans-serif; $header-title-font-family: Zilla Slab, serif; $header-title-font-size: 1.5rem; ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:4:4","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"5 Write a PostCreate a post with the command below: $ hugo new posts/\u003cpost-name\u003e.md New \u003cpost-name\u003e.md file will be created in content/posts directory. If you look at the file, some front matters are already written. Note the line draft: true, which means the post is created as a draft by default. If you want to publish this post, you should change this value to false. ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:5:0","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"6 Execute LocallyBefore publishing online, it’s better to confirm everything is done as you expected. The command below provides local server. $ hugo serve -D -D option is used when you want to publish draft also. You can check at http://localhost:1313. I can see this post I wrote has uploaded. Screenshot from localhost Wow ! ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:6:0","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"7 UploadFinally it’s time to upload my first post ! 😆 Don’t forget to change the value of draft from false to true in the front matter. # Execute from the project root directory. $ hugo -t \u003ctheme-name\u003e # For me, hugo -t LoveIt You can find generated HTML files in public directory. Let’s commit them. $ cd public $ git add . $ git commit -m \"Commit message\" $ git push origin master Also, don’t forget to commit from the project root directory. $ cd .. # move to project root from public directory $ git add . $ git commit -m \"Commit message\" $ git push origin master ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:7:0","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"8 Add a Comment Widget (Utterances)LoveIt theme supports various comment widgets, but unfortunately Utterances is not naturally supported. However, it’s easy to attach Utterances. You can find it out here: https://utteranc.es/ Utterances looks very neat and clean. It provides Github like UI, which I think most users are accustomed to, and actually it uses Github Issuses to manage comments. 👉 Thank you for reading my post ! 🙏 👉 Please leave a comment if you have any ideas to share ! 🎶 ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:8:0","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"}]