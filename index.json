[{"categories":["Lang"],"content":"","date":"2020-05-06","objectID":"/references-in-cplusplus/:0","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"1 Concept of a Reference in C++ A Reference is a new name(alias) for another existing object or variable. And, as the name suggests, it is a pointer internally. Reference is declared as: \u003ctype\u003e\u0026 \u003cname\u003e = \u003creferenced_variable\u003e Like pointer symbol(*), reference symbol(\u0026) can be placed anywhere between \u003ctype\u003e and \u003cname\u003e. Note Note that references must be initialized when they are created. References without objects to reference do not make sense. NULL reference does not exist. Cannot reference to constants. Like pointers cannot.(We need const keyword for this, sometimes called const references) 1 2 3 4 5 6 7 8 int a = 10; int\u0026 ref1 = a; // O int\u0026 ref2 = NULL // X const int b = 5; int\u0026 ref3 = b; // X int\u0026 ref4 = 3; // X ","date":"2020-05-06","objectID":"/references-in-cplusplus/:1","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"2 Uses of References Simple Alias References are pointers(of course they don‚Äôt look like pointers) referring to the exact same object initialized with. References act like the referenced variables but only with different names. 1 2 3 4 5 6 7 8 9 10 11 12 13 #include \u003ciostream\u003e int main() { int data = 10; int\u0026 rData = data; rData = 20; // same as data = 20; std::cout \u003c\u003c \"data: \" \u003c\u003c data \u003c\u003c std::endl; std::cout \u003c\u003c \"rData: \" \u003c\u003c rData \u003c\u003c std::endl; return 0; } The result is: Execution Result data: 20 rData: 20 Function Parameters It is very common that references are used as function parameters. When an argument is not passed as a reference, the copy of the argument is made, and the function deals with the copied value. However, in this case, passing argument as a reference makes us modify the original value directly. Also, if the size of the argument is big(like an array), it is efficient to use a reference as no copy of the big data happens. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \u003ciostream\u003e void increase(int\u0026 value) { value++; } int main() { int data = 10; increase(data); // increase(\u0026data) Wrong! std::cout \u003c\u003c \"data: \" \u003c\u003c data \u003c\u003c std::endl; return 0; } The result is: Execution Result data: 11 Warning Passing constant argument to increase() function like increase(10) will generate a compile error. The reason is that reference can‚Äôt refer to contant value. To avoid this, we use const reference, which will be described below of this article. ","date":"2020-05-06","objectID":"/references-in-cplusplus/:2","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"3 References vs Pointers References can be thought of as pointers with more restrictive power. For example, the first example can be substitued using pointer like: 1 2 3 4 5 6 7 8 #inlcude \u003ciostream\u003e int main() { int data = 10; int* pData = \u0026data; *pData = 20; } Then, why do we need references? Actually, references are recommended in most cases because those restrictions prevent people from certain dangers of using pointers. With Great Power Comes Great Responsibility GIF from Spiderman GIFs Below are some of significant differences between References and Pointers. Allowing NULL values Like said above, a reference can‚Äôt have NULL value. Memory allocation Pointer itself is allocated a memory address, and stores the memory address of the variable it points. However, reference shares the same memory address with the original variable(Of course it should also have memory address in low level). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include \u003ciostream\u003e int main() { int data = 10; int* pData = \u0026data; int\u0026 rData = data; std::cout \u003c\u003c \"addr of data: \" \u003c\u003c \u0026data \u003c\u003c std::endl; std::cout \u003c\u003c \"addr of pData: \" \u003c\u003c \u0026pData \u003c\u003c std::endl; std::cout \u003c\u003c \"addr of rData: \" \u003c\u003c \u0026rData \u003c\u003c std::endl; return 0; } The result is: Execution Result addr of data: 010FFE80 addr of pData: 010FFE74 addr of rData: 010FFE80 Reassigning reference Once a reference is initialized, this reference can‚Äôt change. 1 2 3 4 5 6 7 8 9 #include \u003ciostream\u003e int main() { int num1 = 10; int num2 = 20; int\u0026 rNum1 = num1; rNum1 = num2 } This code changes the value of num1 from 10 to the value of num2(20). Once rNum1 variable refers to num1, it doesn‚Äôt change. However, for the case of pointers, it is possible to change where it points. 1 2 3 4 5 6 7 8 9 10 #include \u003ciostream\u003e int main() { int num1 = 10; int num2 = 20; int* pNum1 = \u0026num1; pNum1 = \u0026num2; } Pointer variable pNum1 now points num2. Now we can see something is wrong. In some cases this can be critical. To prevent this, use reference or const keyword. After all, int\u0026 rNum1 can be regarded as int* const pNum1. ","date":"2020-05-06","objectID":"/references-in-cplusplus/:3","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"4 Const References It seems like reference covers all the pointer‚Äôs problem, but reference can also bring some problems. One big problem is that When a function‚Äôs parameter is reference and we are trying to use that function, we can‚Äôt be sure whether it is reference or not. 1 2 int data = 10; someFunc(data); In C language, we can be sure that the value of data is still 10 after someFunc(data) has been executed. In C++, however, if the function is declared like void someFunc(int\u0026), there exists a possibility of modifying the value of data. This is where const reference should come in. we can prevent modifying the value of original argument by declaring the function as void someFunc(const int\u0026). Const reference also makes referencing to constant values possible. 1 2 3 const int data = 10; const int\u0026 rData = data; // O const int\u0026 rNum = 20; // O This resolves another problem stated above. I mentioned increase(10) is not allowed in the function parameter example. If the function parameter is reference, argument should be made as a non-constant variable. This is very annoying. However, if we use const reference, we are then be able to pass contant argument to the function. Therefore, increase(10)is possible (Actually this function modifies the value of the argument, so it is not the right case to use it). ","date":"2020-05-06","objectID":"/references-in-cplusplus/:4","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Lang"],"content":"5 R-value References (C++11) R-value reference is introduced in C++11. Reference we discussed so far is actually a L-value reference. R-value reference uses two \u0026 symbols: \u003ctype\u003e\u0026\u0026 \u003cname\u003e = \u003cr-value\u003e L-value and R-value Simply we distinguish l-values and r-values by figuring out whether the value can be put left-side or right-side of assignment operator(=). However, I need slightly more concrete criteria. L-value is an object whose memory location is identifiable. Most variables are l-values. R-value is any object that is not l-value, which means we cannot identify its memory location. Literals and temporary values obtained from arithmetic operations or returned by function calls are usually r-values. Misconceptions Functions or operators always yields R-values 1 2 3 4 5 6 7 8 int a = 5 + 3; // (5 + 3) is r-value int b; int\u0026 test() { return b; } test() = 1; // return value of test() is l-value int arr[10]; arr[2] = 100; // [] operator yields l-value R-values are not modifiable 1 TestClass().testFunc(); // TestClass() returns r-value, but testFunc() may modify TestClass object Referencing temporary values A result of arithmetic operations is temporary value. its scope is the line the operation was performed. After the execution of that line, we lose the temporary value. R-value reference makes us keep track of the temporary value. 1 2 3 4 5 6 7 8 9 10 11 12 #include \u003ciostream\u003e int twice(int input) { return input * 2; } int main() { int\u0026\u0026 num1 = 3 + 7; int\u0026\u0026 num2 = twice(10); } This looks a bit wierd because we can just use simple int num1 = 3 + 7 instead of that ugly \u0026\u0026. I know this is not the real usefulness of r-value reference. I need to study further to figure out that. To be continued‚Ä¶ üëâ Thank you for reading my post ! üôè üëâ Please leave a comment if you have any ideas to share ! üé∂ ","date":"2020-05-06","objectID":"/references-in-cplusplus/:5","tags":["Cpp"],"title":"References in C++","uri":"/references-in-cplusplus/"},{"categories":["Env"],"content":"","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:0","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"1 What is Hugo? Hugo is a Static Site Generator. Then, what is a static site generator? To understand this word, we first need to understand what static, or dynamic on the contrary, is when it comes to websites. Static Sites vs Dynamic Sites Static sites just serve plain HTML files, which means exactly the same page is shown to every single one who accesses. Otherwise, Dynamic sites work the opposite way. People can see different pages when those pages are called ‚Äòdynamic.‚Äô Typical example is that the username you see must be different with your friends‚Äô usernames after login. Dynamic sites communicate with databases. We are so accustomed to dynamic sites that someone might say ‚ÄúHow could a website or web service work without databases? üôÑ‚Äù However, it is not always the case that a website needs a database. Blog can actually fall into that case. The main purpose of blog is to show written articles(static contents) to everyone who clicks those articles. In this case, static sites can take advantage over dynamic sites in that static sties are much simpler, and faster. ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:1","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"2 Why Hugo? There are many static site generators available. ‚ÄòHexo‚Äô is one of popular static site generators. ‚ÄòJekyll‚Äô seems to be very popular as it works naturally with ‚ÄòGithub Pages‚Äô. However, there are several reasons why I chose to use Hugo as a static site generator: Hugo‚Äôs build time is the fastest among those three. Hugo has a pretty detailed documentation as I think. Above all, I found a theme that caught my mind. LoveIt ‚ù§ ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:2","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"3 Install Hugo I use WSL(Windows Subsystem for Linux) Ubuntu 18.04 as my environment. Go to Hugo Github Releases page Select a suitable version and download hugo_extended_0.xx.x_Linux-64bit.deb. For me, I downloaded v0.67.1 using wget. You can get the download link by right-clicking the package and clicking ‚Äòcopy link address‚Äô: 1 $ wget https://github.com/gohugoio/hugo/releases/download/v0.67.1/hugo_extended_0.67.1_Linux-64bit.deb Extract the package by using following command(Replace version with what you downloaded). 1 $ sudo dpkg -i hugo_0.xx.x_Linux-64bit.deb Verify the installation is successful. 1 $ hugo version ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:3","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"4 Create a Project Create a New Directory Hugo project directory can be made using the command below. The directory has default structure. 1 2 3 4 5 6 7 8 9 10 11 12 13 $ hugo new site \u003cproject-name\u003e # For me, I created with a name 'blog' $ cd blog $ ls -al total 0 drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 . drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 .. drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 archetypes -rw-rw-rw- 1 jureaky jureaky 82 Apr 29 21:39 config.toml drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 content drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 data drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 layouts drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 static drwxrwxrwx 1 jureaky jureaky 4096 Apr 29 21:39 themes Create a Git Repository Two Git repositories are needed. One is for this project directory blog. The other is for storing generated static files so that the blog can be exposed by Github Pages. The pages will be stored in public directory and this directory will be added as a submodule for this entire project. Go to Github and make two empty repositories(do not include README or any other). \u003cproject name repository\u003e - For me, blog \u003cusername\u003e.github.io repository - For me, jureaky.github.io Make the project directory as a git repository, and add github repository as origin 1 2 $ git init $ git remote add origin https://github.com/jureaky/blog.git Add another github repository as a submodule in public directory. 1 $ git submodule add -b master https://github.com/jureaky/jureaky.github.io.git public Tip For WSL users, to prevent unexpected issues caused by different line ending between Linux and Windows, add below configuration to .gitattributes file in each git project root. 1 2 3 * text=auto eol=lf *.{cmd,[cC][mM][dD]} text eol=crlf *.{bat,[bB][aA][tT]} text eol=crlf For more information, please see here. Install Theme I found this theme, LoveIt. It looks neat and simple, but provides lots of plugins and features. The command below downloads the theme in themes/LovIt directory and add it as a submodule, which is a recommended way of installing theme because you can manage theme seperately so it is convenient if there is any update on your theme. 1 $ git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt Blog Configuration Blog configuration is done through config.toml file in your root directory. Modify this file and add apropriate configurations. There might be a document for this in your theme page. For LoveIt theme, menu configuration can be found here, and site configuration [here]( https://hugoloveit.com/theme-documentation-basics/#site-configuration ). Further, I overrided some css variables to change fonts by creating config/css/_override.scss file: 1 2 3 4 @import url('https://fonts.googleapis.com/css2?family=Open+Sans\u0026family=Zilla+Slab\u0026display=swap'); $global-font-family: Open Sans, sans-serif; $header-title-font-family: Zilla Slab, serif; $header-title-font-size: 1.5rem; ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:4","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"5 Write a Post Create a post with the command below: 1 $ hugo new posts/\u003cpost-name\u003e.md New \u003cpost-name\u003e.md file will be created in content/posts directory. If you look at the file, some front matters are already written. Note the line draft: true, which means the post is created as a draft by default. If you want to publish this post, you should change this value to false. ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:5","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"6 Execute Locally Before publishing online, it‚Äôs better to confirm everything is done as you expected. The command below provides local server. 1 $ hugo serve -D -D option is used when you want to publish draft also. You can check at http://localhost:1313. I can see this post I wrote has uploaded. Screenshot from localhost\" Screenshot from localhost Wow ! ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:6","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"7 Upload Finally it‚Äôs time to upload my first post ! üòÜ Don‚Äôt forget to change the value of draft from false to true in the front matter. 1 2 # Execute from the project root directory. $ hugo -t \u003ctheme-name\u003e # For me, hugo -t LoveIt You can find generated HTML files in public directory. Let‚Äôs commit them. 1 2 3 4 $ cd public $ git add . $ git commit -m \"Commit message\" $ git push origin master Also, don‚Äôt forget to commit from the project root directory. 1 2 3 4 $ cd .. # move to project root from public directory $ git add . $ git commit -m \"Commit message\" $ git push origin master ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:7","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"},{"categories":["Env"],"content":"8 Add a Comment Widget (Utterances) LoveIt theme supports various comment widgets, but unfortunately Utterances is not naturally supported. However, it‚Äôs easy to attach Utterances. You can find it out here: https://utteranc.es/ Utterances looks very neat and clean. It provides Github like UI, which I think most users are accustomed to, and actually it uses Github Issuses to manage comments. üëâ Thank you for reading my post ! üôè üëâ Please leave a comment if you have any ideas to share ! üé∂ ","date":"2020-04-30","objectID":"/create-a-github-blog-with-hugo/:8","tags":["Blog","Hugo"],"title":"Create a Github Blog With Hugo","uri":"/create-a-github-blog-with-hugo/"}]